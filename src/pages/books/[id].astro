---
// pages/books/[id].astro
import { prisma } from '../../lib/prisma';
import Layout from '../../layouts/Layout.astro'; // Assuming you have a layout
import ReadingSessionList from '../../components/ReadingSessionList';
import ReadingSessionForm from '../../components/ReadingSessionForm';
import type { Book, ReadingSession } from '@prisma/client';
import BookDetail from '@/components/BookDetail';

// export async function getStaticPaths() {
//   const books = await prisma.book.findMany();
//   return books.map((book) => ({
//     params: { id: String(book.id) },
//   }));
// }

const { id } = Astro.params;
const bookId = parseInt(id || "0");

if (isNaN(bookId)) {
  return Astro.redirect('/404'); // Or handle the error appropriately
}

const book = await prisma.book.findUnique({
  where: { id: bookId },
  include: {
      authors: {
          include: {
              author: true
          }
      },
      genres: {
          include: {
              genre: true
          }
      },
    readingSessions: true
  },
});

if (!book) {
  return Astro.redirect('/404');
}

const readingSessions = await prisma.readingSession.findMany({
  where: {
    bookId: book.id
  },
  orderBy: {
    startTime: "desc"
  }
});




---

<Layout title={book.title}>
    <main class="container mx-auto p-4">
  <h1 class="text-2xl font-bold mb-4">{book.title}</h1>
    <!-- <p class="text-lg mb-2">Authors: {book.authors.join(', ')}</p> -->
    <!-- <p class="text-lg mb-4">Genres: {book.genres.join(', ')}</p> -->
    <BookDetail client:load book={book} readingSessions={readingSessions} />
</main>
</Layout>