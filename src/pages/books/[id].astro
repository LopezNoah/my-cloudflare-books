---
// pages/books/[id].astro
import { prisma } from '../../lib/prisma';
import Layout from '../../layouts/Layout.astro'; // Assuming you have a layout
import ReadingSessionList from '../../components/ReadingSessionList';
import ReadingSessionForm from '../../components/ReadingSessionForm';
import type { Book, ReadingSession } from '@prisma/client';

export async function getStaticPaths() {
  const books = await prisma.book.findMany();
  return books.map((book) => ({
    params: { id: String(book.id) },
  }));
}

const { id } = Astro.params;
const bookId = parseInt(id || "0");

if (isNaN(bookId)) {
  return Astro.redirect('/404'); // Or handle the error appropriately
}

const book = await prisma.book.findUnique({
  where: { id: bookId },
  include: {
      authors: {
          include: {
              author: true
          }
      },
      genres: {
          include: {
              genre: true
          }
      },
    readingSessions: true
  },
});

if (!book) {
  return Astro.redirect('/404');
}

const flattenedBook = {
    ...book,
    authors: book.authors.map(bookAuthor => bookAuthor.author.name),
    genres: book.genres.map(bookGenre => bookGenre.genre.name),
}


const handleDelete = async (sessionId: number) => {
    const response = await fetch(`/api/reading-sessions/${sessionId}`, { method: 'DELETE' });
    if (response.ok) {
      // Refresh the page (simple approach, could be optimized with client-side state update)
      return window.location.href = `/books/${bookId}`;
    } else {
      alert("Error deleting session");
      console.error("Error deleting session:", await response.text());
    }
};

// // Function to re-fetch sessions (used after adding a new session)
// const refetchSessions = () => {
//   return Astro.redirect(`/books/${bookId}`); //easiest way to do this
// };

---

<Layout title={flattenedBook.title}>
    <main class="container mx-auto p-4">
  <h1 class="text-2xl font-bold mb-4">{flattenedBook.title}</h1>
    <p class="text-lg mb-2">Authors: {flattenedBook.authors.join(', ')}</p>
    <p class="text-lg mb-4">Genres: {flattenedBook.genres.join(', ')}</p>


  <h2 class="text-xl font-semibold mb-2">Reading Sessions</h2>
  <ReadingSessionList sessions={book.readingSessions} onDelete={handleDelete} client:load/>

  <h2 class="text-xl font-semibold mt-6 mb-2">Add Reading Session</h2>
  <ReadingSessionForm bookId={bookId} client:load />
</main>
</Layout>