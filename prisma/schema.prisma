// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Book {
  id            Int             @id @default(autoincrement())
  title         String
  isbn          String?
  pageCount     Int?
  genres        BookGenre[]     // Relation to BookGenre (join table)
  authors       BookAuthor[]    // Relation to BookAuthor (join table)
  readingSessions ReadingSession[]
}

model Genre {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  books BookGenre[] // Relation to BookGenre (join table)
}

model Author {
  id    Int     @id @default(autoincrement())
  name  String
  books BookAuthor[] // Relation to BookAuthor (join table)
}

// Explicit join table for Book <-> Genre (Many-to-Many)
model BookGenre {
  id        Int     @id @default(autoincrement())
  bookId    Int
  book      Book    @relation(fields: [bookId], references: [id])
  genreId   Int
  genre     Genre   @relation(fields: [genreId], references: [id])

  @@unique([bookId, genreId]) // Ensure unique pairs of book and genre
}

// Explicit join table for Book <-> Author (Many-to-Many)
model BookAuthor {
  id        Int     @id @default(autoincrement())
  bookId    Int
  book      Book    @relation(fields: [bookId], references: [id])
  authorId  Int
  author    Author  @relation(fields: [authorId], references: [id])

  @@unique([bookId, authorId]) // Ensure unique pairs of book and author
}

model ReadingSession {
  id          Int      @id @default(autoincrement())
  bookId      Int
  book        Book     @relation(fields: [bookId], references: [id])
  startTime   DateTime
  duration    Int      // Duration in minutes or similar
  pageStart   Int?
  pageEnd     Int?
  finishedBook Boolean? @default(false)
}